/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.sea.gui;

import com.sea.db.ConnectionFactory;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.BoxLayout;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author kusha
 */
public class attendance extends javax.swing.JPanel {
    Connection con = null;
    
    /**
     * Creates new form attendance
     */
    public attendance() {
        con = new ConnectionFactory().getConnection();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        coursecheck = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        coursecheck.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "N4", "N5", "PTE", "IELTS" }));
        coursecheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coursecheckActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Course:");

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        jLabel10.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        jLabel10.setText("ATTENDANCE");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/attendanceIcon.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(69, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addContainerGap(111, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(coursecheck, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(coursecheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void coursecheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coursecheckActionPerformed
        // TODO add your handling code here:
        displaySelectedStudents();
    }//GEN-LAST:event_coursecheckActionPerformed
    private void displaySelectedStudents() {
        String selectedCourse = (String) coursecheck.getSelectedItem();
        String students = getStudentsFromDatabase(selectedCourse);

        // Create a custom panel with checkboxes for each student
        JPanel panel = createStudentPanel(students);

        // Use JOptionPane to show the students in a message dialog
        int result = JOptionPane.showConfirmDialog(this, panel, "Students for " + selectedCourse, JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            updateAttendance(selectedCourse, panel);
        }
    }
    private String getStudentsFromDatabase(String course) {
        // Modify the SQL query according to your database schema
        String query = "SELECT name FROM student WHERE course = ?";
        StringBuilder students = new StringBuilder();

        try (PreparedStatement preparedStatement = con.prepareStatement(query)) {
            preparedStatement.setString(1, course);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {
                    students.append(resultSet.getString("name")).append("\n");
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle database query error
        }

        if (students.length() == 0) {
            return "No students found for the selected course.";
        }

        return students.toString();
    }
    private JPanel createStudentPanel(String students) {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        // Split the students into an array
        String[] studentArray = students.split("\n");

        // Create checkboxes for each student
        for (String student : studentArray) {
            JCheckBox checkBox = new JCheckBox(student);
            panel.add(checkBox);
        }

        return panel;
    }
    
private void updateAttendance(String selectedCourse, JPanel panel) {
    // Disable auto-commit to handle transactions manually
    try {
        con.setAutoCommit(false);

        // Iterate through checkboxes and update attendance for selected students
        int updatedCount = 0;

        for (int i = 0; i < panel.getComponentCount(); i++) {
            if (panel.getComponent(i) instanceof JCheckBox) {
                JCheckBox checkBox = (JCheckBox) panel.getComponent(i);

                if (checkBox.isSelected()) {
                    String studentName = checkBox.getText();
                    if (incrementAttendance(selectedCourse, studentName)) {
                        updatedCount++;
                    }
                }
            }
        }

        // Commit the transaction if no errors occurred
        con.commit();

        // Show a JOptionPane message based on the update result
        if (updatedCount > 0) {
            JOptionPane.showMessageDialog(this, "Attendance updated for " + updatedCount + " student(s).", "Update Successful", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No records were updated.", "No Update", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (SQLException e) {
        // Rollback the transaction in case of exception
        try {
            con.rollback();
        } catch (SQLException rollbackException) {
            rollbackException.printStackTrace();
        }
        e.printStackTrace();
    } finally {
        // Enable auto-commit after handling transactions
        try {
            con.setAutoCommit(true);
        } catch (SQLException autoCommitException) {
            autoCommitException.printStackTrace();
        }
    }
}

    private boolean incrementAttendance(String course, String studentName) {
        // Modify the SQL query according to your database schema
        String query = "UPDATE student SET attendance = attendance + 1 WHERE course = ? AND name = ?";

        try (PreparedStatement preparedStatement = con.prepareStatement(query)) {
            preparedStatement.setString(1, course);
            preparedStatement.setString(2, studentName);
            int updatedRows = preparedStatement.executeUpdate();

            return updatedRows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> coursecheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
